cor_matrix <- cor(data_subset)
# Convert the correlation matrix to a data frame
cor_df <- reshape2::melt(cor_matrix)
# Filter the data to only include the top 10 correlated variables to officer_years_on_force
cor_top_10 <- cor_df %>%
filter(Var1 == "OFFICER_YEARS_ON_FORC" & value != 1) %>%
arrange(desc(value)) %>%
head(10)
# Extract the names of the top 10 correlated variables
top_10_vars <- cor_top_10$Var2
# Create a subset of the data with only the top 10 correlated variables and officer_years_on_force
data_subset_top_10 <- data_subset %>%
select(one_of(c("OFFICER_YEARS_ON_FORC", top_10_vars)))
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_ID,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# Select the relevant variables
data_subset <- subdata[, c("OFFICER_YEARS_ON_FORCE", "REPORTING_AREA", "BEAT", "SECTOR", "Officerrace", "officergender", "subjectrace", "subjectgender", "subjectinjury", "officerinjury")]
# Calculate the correlation matrix
cor_matrix <- cor(data_subset)
data_subset
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
Officerrace
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_ID,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# Select the relevant variables
data_subset <- subdata[, c("OFFICER_YEARS_ON_FORCE", "REPORTING_AREA", "BEAT", "SECTOR", "Officerrace", "officergender", "subjectrace", "subjectgender", "subjectinjury", "officerinjury")]
# convert the data frame to numeric
data_subset <- apply(data_subset, 2, as.numeric)
# Calculate the correlation matrix
cor_matrix <- cor(data_subset)
# Identify the variables with the highest correlation with OFFICER_YEARS_ON_FORCE
cor_with_officer <- cor_matrix[, "OFFICER_YEARS_ON_FORCE"]
top_vars <- names(sort(cor_with_officer, decreasing = TRUE)[2:11])
# Create a subset of the data with only the top 10 correlated variables
data_subset_top10 <- data_subset[, c("OFFICER_YEARS_ON_FORCE", top_vars)]
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_ID,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# Select the relevant variables
data_subset <- subdata[, c("OFFICER_YEARS_ON_FORCE", "REPORTING_AREA", "BEAT", "SECTOR", "Officerrace", "officergender", "subjectrace", "subjectgender", "subjectinjury", "officerinjury")]
# convert the data frame to numeric
data_subset <- apply(data_subset, 2, as.numeric)
# Calculate the correlation matrix
cor_matrix <- cor(data_subset)
# Identify the variables with the highest correlation with OFFICER_YEARS_ON_FORCE
cor_with_officer <- cor_matrix[, "OFFICER_YEARS_ON_FORCE"]
top_vars <- names(sort(cor_with_officer, decreasing = TRUE)[2:11])
# Create a subset of the data with only the top 10 correlated variables
data_subset_top10 <- data_subset[,c("OFFICER_YEARS_ON_FORCE", top_vars)]
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_ID,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_numVar <- cor(subdata, use="pairwise.complete.obs") #correlations of all numeric variables
#sort on decreasing correlations with SalePrice
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_ID,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_numVar <- cor(subdata, use="pairwise.complete.obs") #correlations of all variables
#sort on decreasing correlations with OFFICER_YEARS_ON_FORCE
cor_sorted <- as.matrix(sort(cor_numVar[,'OFFICER_YEARS_ON_FORCE'], decreasing = TRUE))
#select only high correlations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.3| x< -0.3)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_numVar <- cor(subdata, use="pairwise.complete.obs") #correlations of all variables
#sort on decreasing correlations with OFFICER_YEARS_ON_FORCE
cor_sorted <- as.matrix(sort(cor_numVar[,'OFFICER_YEARS_ON_FORCE'], decreasing = TRUE))
#select only high correlations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.05| x< -0.05)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
names(data)
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,SUBJECT_ID,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_numVar <- cor(subdata, use="pairwise.complete.obs") #correlations of all variables
#sort on decreasing correlations with OFFICER_YEARS_ON_FORCE
cor_sorted <- as.matrix(sort(cor_numVar[,'OFFICER_YEARS_ON_FORCE'], decreasing = TRUE))
#select only high correlations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x)>0.3| x< -0.3)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_numVar <- cor(subdata, use="pairwise.complete.obs") #correlations of all variables
Creating a correlation matrix for the selected variables
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_matrix <- cor(subdata)
# Creating a matrix of the same dimensions as cor_matrix, but with all entries set to 0
mask <- matrix(0, nrow(cor_matrix), ncol(cor_matrix))
# Setting entries in the mask matrix to 1 for correlations that are above the threshold (0.7)
mask[abs(cor_matrix) > 0.7] <- 1
# Creating a heat map of the correlation matrix, with high correlations highlighted in red
library(ggplot2)
ggplot2::ggplot(data = reshape2::melt(cor_matrix)) +
ggplot2::geom_tile(ggplot2::aes(x = Var1, y = Var2, fill = value)) +
ggplot2::geom_text(data = reshape2::melt(cor_matrix * mask),
ggplot2::aes(x = Var1, y = Var2, label = round(value, 2)),
color = "red") +
ggplot2::scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation\nCoefficient") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
ggplot2::coord_fixed()
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,REPORTING_AREA,BEAT,SECTOR,STREET_NUMBER,INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_matrix <- cor(subdata)
# Creating a matrix of the same dimensions as cor_matrix, but with all entries set to 0
mask <- matrix(0, nrow(cor_matrix), ncol(cor_matrix))
# Setting entries in the mask matrix to 1 for correlations that are above the threshold (0.7)
mask[abs(cor_matrix) > 0.5] <- 1
# Creating a heat map of the correlation matrix, with high correlations highlighted in red
library(ggplot2)
ggplot2::ggplot(data = reshape2::melt(cor_matrix)) +
ggplot2::geom_tile(ggplot2::aes(x = Var1, y = Var2, fill = value)) +
ggplot2::geom_text(data = reshape2::melt(cor_matrix * mask),
ggplot2::aes(x = Var1, y = Var2, label = round(value, 2)),
color = "red") +
ggplot2::scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation\nCoefficient") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
ggplot2::coord_fixed()
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,BEAT, INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_matrix <- cor(subdata)
# Creating a matrix of the same dimensions as cor_matrix, but with all entries set to 0
mask <- matrix(0, nrow(cor_matrix), ncol(cor_matrix))
# Setting entries in the mask matrix to 1 for correlations that are above the threshold (0.7)
mask[abs(cor_matrix) > 0.5] <- 1
# Creating a heat map of the correlation matrix, with high correlations highlighted in red
library(ggplot2)
ggplot2::ggplot(data = reshape2::melt(cor_matrix)) +
ggplot2::geom_tile(ggplot2::aes(x = Var1, y = Var2, fill = value)) +
ggplot2::geom_text(data = reshape2::melt(cor_matrix * mask),
ggplot2::aes(x = Var1, y = Var2, label = round(value, 2)),
color = "red") +
ggplot2::scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation\nCoefficient") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
ggplot2::coord_fixed()
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,BEAT, INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_matrix <- cor(subdata)
# Creating a matrix of the same dimensions as cor_matrix, but with all entries set to 0
mask <- matrix(0, nrow(cor_matrix), ncol(cor_matrix))
# Setting entries in the mask matrix to 1 for correlations that are above the threshold (0.7)
mask[abs(cor_matrix) > 0.3] <- 1
# Creating a heat map of the correlation matrix, with high correlations highlighted in red
library(ggplot2)
ggplot2::ggplot(data = reshape2::melt(cor_matrix)) +
ggplot2::geom_tile(ggplot2::aes(x = Var1, y = Var2, fill = value)) +
ggplot2::geom_text(data = reshape2::melt(cor_matrix * mask),
ggplot2::aes(x = Var1, y = Var2, label = round(value, 2)),
color = "red") +
ggplot2::scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation\nCoefficient") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
ggplot2::coord_fixed()
library(corrplot)
library(ggcorrplot)
library(reshape2)
attach(data)
# Convert the vector to a factor
Officerrace<- factor(OFFICER_RACE)
subjectarrest <- factor(SUBJECT_WAS_ARRESTED)
officergender <- factor(OFFICER_GENDER)
subjectrace <- factor(SUBJECT_RACE)
subjectgender<- factor(SUBJECT_GENDER)
subjectinjury <- factor(SUBJECT_INJURY)
officerinjury <- factor(OFFICER_INJURY)
# Subset the dataset to numerical variables only
subdata <- data.frame(UOF_NUMBER,OFFICER_YEARS_ON_FORCE,BEAT, INCIDENT_DATE_AND_TIME, OFFICER_HIRE_DATE, Officerrace, subjectarrest, officergender, subjectrace, subjectgender, subjectinjury, officerinjury  )
# convert the data frame to numeric
subdata <- apply(subdata, 2, as.numeric)
cor_matrix <- cor(subdata)
# Creating a matrix of the same dimensions as cor_matrix, but with all entries set to 0
mask <- matrix(0, nrow(cor_matrix), ncol(cor_matrix))
# Setting entries in the mask matrix to 1 for correlations that are above the threshold (0.7)
mask[abs(cor_matrix) > 0] <- 1
# Creating a heat map of the correlation matrix, with high correlations highlighted in red
library(ggplot2)
ggplot2::ggplot(data = reshape2::melt(cor_matrix)) +
ggplot2::geom_tile(ggplot2::aes(x = Var1, y = Var2, fill = value)) +
ggplot2::geom_text(data = reshape2::melt(cor_matrix * mask),
ggplot2::aes(x = Var1, y = Var2, label = round(value, 2)),
color = "red") +
ggplot2::scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Correlation\nCoefficient") +
ggplot2::theme_minimal() +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 1,
size = 10, hjust = 1)) +
ggplot2::coord_fixed()
library(tidyverse)
library(plotly)
# Group data by day and calculate total incidents
daily_incidents <- data %>%
group_by(INCIDENT_DATE) %>%
summarise(total_incidents = n())
# Create time series plot with plotly
plot_ly(daily_incidents, x = ~INCIDENT_DATE, y = ~total_incidents, type = "scatter", mode = "lines") %>%
layout(title = "Total Incidents per Day",
xaxis = list(title = "Date"),
yaxis = list(title = "Total Incidents")) %>%
highlight(on = "plotly_hover", off = "plotly_unhover", dynamic = TRUE)
library(tidyverse)
library(plotly)
# Load data
data <- read.csv("your_data_file.csv")
library(tidyverse)
library(plotly)
# Group data by day and calculate total incidents
daily_incidents <- data %>%
group_by(INCIDENT_DATE) %>%
summarise(total_incidents = n())
# Create time series plot with plotly
plot_ly(daily_incidents, x = ~INCIDENT_DATE, y = ~total_incidents, type = "scatter", mode = "lines") %>%
layout(title = "Total Incidents per Day",
xaxis = list(title = "Date"),
yaxis = list(title = "Total Incidents"),
colorway = c("blue", "red", "green", "orange", "purple")) %>%
highlight(on = "plotly_hover", dynamic = TRUE)
library(tidyverse)
library(plotly)
# Group data by day and calculate total incidents
daily_incidents <- data %>%
group_by(INCIDENT_DATE) %>%
summarise(total_incidents = n())
# Create time series plot with plotly
plot_ly(daily_incidents, x = ~INCIDENT_DATE, y = ~total_incidents, type = "scatter", mode = "lines") %>%
layout(title = "Total Incidents per Day",
xaxis = list(title = "Date"),
yaxis = list(title = "Total Incidents"),
colorway = c("blue", "red", "green", "orange", "purple")) %>%
highlight(on = "plotly_hover", dynamic = TRUE)
# Calculate the number of officers who are involved in subject injury
num_subject_injured <- data %>%
filter(SUBJECT_INJURY == "Yes") %>%
group_by(OFFICER_ID) %>%
summarize(num_injuries = n())
num_subject_injured
sum(num_subject_injured$num_injuries)
library(ggplot2)
library(plotly)
p <- ggplot(num_subject_injured, aes(x = OFFICER_ID, y = num_injuries)) +
geom_point(color = "red", alpha = 0.7) +
stat_smooth(method = "loess", se = FALSE) +  # add smoothing line
labs(title = "Scatter Plot of Number of subject injuries involved by an officer", x = "Officer ID", y = "Number of Injuries") +
theme_minimal()
ggplotly(p)
# Create a scatter plot with a loess smoothing line
ggplot(data, aes(x = OFFICER_YEARS_ON_FORCE, y = INCIDENT_DATE)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
labs(x = "Officer Years on Force", y = "Number of Incidents",
title = "Relationship between Officer Experience and Incidents")
# Load the required packages
library(leaflet)
# Create a leaflet map
leaflet(data ) %>%
addTiles() %>%
addMarkers(~LOCATION_LONGITUDE, ~LOCATION_LATITUDE, popup = ~REPORTING_AREA)
library(leaflet)
leaflet(data) %>%
addTiles() %>%
addMarkers(lng = ~LOCATION_LONGITUDE, lat = ~LOCATION_LATITUDE,
popup = ~paste("Incident Reason: ", INCIDENT_REASON,
"<br>Subject Race: ", SUBJECT_RACE,
"<br>Subject Offense: ", SUBJECT_OFFENSE))
library(leaflet)
leaflet(data) %>%
addTiles() %>%
addMarkers(lng = ~LOCATION_LONGITUDE, lat = ~LOCATION_LATITUDE,
popup = ~paste("Incident Reason: ", INCIDENT_REASON,
"<br>Officer Race: ", OFFICER_RACE,
"<br>Subject Race: ", SUBJECT_RACE,
"<br>Subject Offense: ", SUBJECT_OFFENSE
))
names(data)
library(leaflet)
leaflet(data) %>%
addTiles() %>%
addMarkers(lng = ~LOCATION_LONGITUDE, lat = ~LOCATION_LATITUDE,
popup = ~paste("Incident Reason: ", INCIDENT_REASON,
"<br>Subject Race: ", SUBJECT_RACE,
"<br>Subject Offense: ", SUBJECT_OFFENSE
))
# Calculate the number of officers who are involved in subject injury
num_subject_injured <- data %>%
filter(SUBJECT_INJURY == "Yes") %>%
group_by(OFFICER_ID) %>%
summarize(num_injuries = n())
num_subject_injured
sum(num_subject_injured$num_injuries)
library(ggplot2)
library(plotly)
p <- ggplot(num_subject_injured, aes(x = OFFICER_ID, y = num_injuries)) +
geom_point(color = "red", alpha = 0.7) +
labs(title = "Scatter Plot of Number of subject injuries involved by an officer", x = "Officer ID", y = "Number of Injuries") +
theme_minimal()
ggplotly(p)
library(plotly)
plot_ly(data , x = ~OFFICER_YEARS_ON_FORCE, y = ~INCIDENT_DATE, color = ~OFFICER_RACE, size = ~UOF_NUMBER,
mode = "markers", type = "scatter") %>%
layout(title = "Number of Incidents vs Officer Years on Force",
xaxis = list(title = "Officer Years on Force"),
yaxis = list(title = "Incident Date"))
table(data$OFFICER_RACE)
aggr_plot <- aggr(data, col=c('navyblue','red'),numbers=TRUE,sortVars=TRUE,
labels=names(data),cex.axis=.7,gap=3,
ylab=c("Histogram of Missing data","Pattern of Missing data"))
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','red'),numbers=TRUE,sortVars=TRUE,
labels=names(data),cex.axis=.7,gap=3,
ylab=c("Histogram of Missing data","Pattern of Missing data"))
library(ggplot2)
# Calculate the number of officers who are injured
num_officers_injured <- data %>%
filter(OFFICER_INJURY == "Yes") %>%
group_by(OFFICER_ID) %>%
summarize(num_injuries = n())
num_officers_injured
sum(num_officers_injured$num_injuries)
# Create a histogram of the number of officers who are injured
ggplot(num_officers_injured, aes(x = num_injuries)) +
geom_histogram(aes(fill = ..count..), binwidth = 1, color = "black", alpha = 0.7) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
stat_bin(aes(label = ..count..), binwidth = 1, color = "black", size = 2, vjust = -0.5) +
labs(title = "Number of officers who are injured", x = "Number of Injuries", y = "Count") +
theme_minimal()
setwd("C:/Users/mellogwayo/Downloads/3D Maps Tutorial")
getwd()
